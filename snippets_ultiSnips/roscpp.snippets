snippet y2qm "Message yaw to quaternion"
geometry_msgs::Quaternion ${1:q_msg} = tf::createQuaternionMsgFromYaw(${2:yaw}); $0
endsnippet

snippet y2q "Yaw to quaternion"
tf::Quaternion ${1:q} = tf::createQuaternionFromYaw(${2:yaw}); $0
endsnippet

snippet q2y "Quaternion to yaw"
double ${1:yaw} = tf::getYaw(${2:q}); $0
endsnippet

snippet e2qm "Message euler to quaternion"
geometry_msgs::Quaternion ${1:q_msg} = tf::createQuaternionMsgFromRollPitchYaw(${2:roll}, ${3:pitch}, ${4:yaw}); $0
endsnippet

snippet e2q "Euler to quaternion"
tf::Quaternion ${1:q} = tf::createQuaternionFromRPY(${2:roll}, ${3:pitch}, ${4:yaw}); $0
endsnippet

snippet ininode "Initialize a ros node"
#include "ros/ros.h"

int main(int argc, char **argv)
{
    ros::init(argc, argv, "${1:name}_node");
    if (argc != ${2:1}){
        ROS_INFO("usage: $1_node");
        return 1;
    }
    ros::NodeHandle nh;
    ros::Rate loop_rate(10);

    while (ros::ok())
    {
	ros::spinOnce();
	loop_rate.sleep();
    }
    return 0;
}
endsnippet

snippet sub "Subscriber" !b
ros::Subscriber ${1}_sub = ${2:nh}.subscribe("${3:topic}", ${4:10}, ${5:callback}); $0
endsnippet

snippet pub "Publisher" !b
ros::Publisher ${1}_pub = ${2:nh}.advertise<${3:std_msgs::String}>("${4:topic}", ${5:10});$0
endsnippet

snippet subcb "Message callback" !b
void ${1:callback}(const ${2:std_msgs::String}::ConstPtr& ${3:msg})
{
  $0
}
endsnippet

snippet pubcall "Message call" !b
${1:std_msgs::String} ${2:msg};
$2.${3:parameter} = ${4};
${5}_pub.publish(msg);
$0
endsnippet

snippet srvcl "Service client" !b
ros::ServiceClient ${1}_srvcl = ${2:nh}.serviceClient<${3:std_srvs::Empty}>("${4:topic}"); $0
endsnippet

snippet srv "Service server" !b
ros::ServiceServer ${1}_srv = ${2:nh}.advertiseService("${3:topic}", ${5:callback}); $0
endsnippet

snippet srvcb "Service callback" !b
bool ${1:callback}(${2:std_srvs::Empty}::Request& ${3:req}, $2::Response& ${4:res})
{
    $0
    return true;
}
endsnippet

snippet srvcall "Call service" !b
${1:std_srvs::Empty} ${2:srv};
$2.request.${3:parameter} = ${4};
if (${5}_srvcl.call(srv))
{
    $0
}
endsnippet
