snippet #!
#!/usr/bin/env python
$0
endsnippet

snippet imp
import ${1:module}
$0
endsnippet

snippet from
from ${1:package} import ${2:module}
$0
endsnippet

snippet docs
'''
File: ${1:`Filename('$1.py', 'foo.py')`}
Author: ${2:`g:snips_author`}
Description: ${3}
'''

$0
endsnippet

snippet while 
while ${1:condition}:
    ${2:# code...}

$0
endsnippet

snippet class
class ${1:ClassName}(${2:object}):
    """${3:docstring for $1}"""
    def __init__(self, ${4:arg}):
	${5:super($1, self).__init__()}
	self.$4 = $4
	${6}

$0
endsnippet

snippet def
def ${1:fname}(${3:params}):
    $4

$0
endsnippet

snippet if
if ${1:condition}:
    ${2}

$0
endsnippet

snippet ifel
if ${1:condition}:
    ${2}
else:
    ${3}

$0
endsnippet

snippet ifefel
if ${1:condition}:
    ${2}
elif ${3:condition}:
    ${4}
else:
    ${5}

$0
endsnippet

snippet for
for ${1:item} in ${2:items}:
    ${3}

$0
endsnippet

snippet forp
for ${1:item} in ${2:items}:
    print("${3}" % ($1)) 
$0
endsnippet

snippet print
print("${1}" % (${2:var})) 
endsnippet

snippet lambda
${1:var} = lambda ${2:vars} : ${3:action}
$0
endsnippet

snippet .
self.
$0
endsnippet

snippet try Try/Except
try:
    ${1:pass}
except ${2:Exception}, ${3:e}:
    ${4:raise $3}

$0
endsnippet

snippet try Try/Except/Else
try:
    ${1:pass}
except ${2:Exception}, ${3:e}:
    ${4:raise $3}
else:
    ${5:pass}

$0
endsnippet

snippet try Try/Except/Finally
try:
    ${1:pass}
except ${2:Exception}, ${3:e}:
    ${4:raise $3}
finally:
    ${5:pass}

$0
endsnippet

snippet try Try/Except/Else/Finally
try:
    ${1:pass}
except ${2:Exception}, ${3:e}:
    ${4:raise $3}
else:
    ${5:pass}
finally:
    ${6:pass}

$0
endsnippet

snippet "
"""
${1:doc}
"""
$0
endsnippet
