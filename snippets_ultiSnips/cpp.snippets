snippet inih "initialize class header"
#ifndef ${1:`!p snip.rv = snip.basename.upper() or "NAME"`}_H
#define $1_H
$0

#endif // $1_H
endsnippet

snippet source "#include local header (inc)" !
#include "${1:`!p snip.rv = snip.basename`}.h"

$1::$1(${2})
{
    ${3}
}

$0
endsnippet

snippet inc "#include"
#include <${1:iostream}>
$0
endsnippet

snippet main "Initialize main"
int main(int argc, char **argv)
{
    $0
}
endsnippet

snippet usage "Main usage"
if (argc != ${1:1}){
    std::cout << "Usage ./${2:exe} $3" << std::endl;
    exit(EXIT_FAILURE);
}
$0
endsnippet

snippet class "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
    $1(${2});

private:
    ${3}
};
endsnippet

snippet getset "member getter and setter"
void ${1:`!p snip.rv = snip.basename or "name"`}::set${2:Variable}(const ${3:T}& ${4:value})
{
  $5 = value;
}

$3 $1::get$2() const
{
  return ${5};
}
endsnippet

snippet struct "structure" !
struct ${1:name}
{
  $0
};
endsnippet

snippet try
try {
    ${1}
}
catch (${2:exception}) {
    ${3}
}
$0
endsnippet

snippet funcf "free func"
${1:void} ${2:Func}(${3}) {
    $4
}
$0
endsnippet

snippet funch "header func"
${1:void} ${3:Func}(${4});
$0
endsnippet

snippet funcm "external member func"
${1:void} ${2:`!p snip.rv = snip.basename or "class_name"`}::${3:Func}(${4})
{
  $0
}
endsnippet

snippet nsp "namespace .. (namespace)" !
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`} {
    $0
}${1/.+/ \/\/ namespace /m}$1
endsnippet

snippet uns "unnamed namespace" !
namespace {
    $0
}  // unnamed namespace
endsnippet

snippet for "for int loop (for)"
for (int ${1:var} = 0; $1 < ${2:count}; ${3:++}$1) {
    ${4}
}
$0
endsnippet

snippet fori "for size_t loop (fori)"
for (size_t i = 0; i < ${2:count}; ${3:++}i) {
    ${4}
}
$0
endsnippet

snippet forj "for size_t loop (forj)"
for (size_t j = 0; j < ${2:count}; ${3:++}j) {
    ${4}
}
$0
endsnippet

snippet forp "print loop (forp)"
//print $1
for (size_t p = 0; p < ${1:vec}.size(); ++p) {
    std::cout << $1[p]${2} << std::endl;
}
$0
endsnippet

snippet itera
for(auto ${1:it} = ${2:vec}.begin(); $1 != $2.end(); ++$1) {
    ${3:std::cout << *$1 << std::endl;}
}
$0
endsnippet

snippet switch "switch block"
switch (${1:state}) {
    case ${2:condition}:
	${3}
	break;
    default:
	${4}
}
$0
endsnippet

snippet ss "std::string"
std::string $0
endsnippet

snippet vec "std::vector"
std::vector<${1:int}> $0
endsnippet

snippet list "std::list"
std::list<${1:int}> $0
endsnippet

snippet stack "std::stack"
std::stack<${1:int}> $0
endsnippet

snippet queue "std::queue"
std::queue<${1:int}> $0
endsnippet

snippet umap "std::unordered_map"
std::unordered_map<${1:key}, ${2:value}> $0
endsnippet

snippet map "std::map"
std::map<${1:key}, ${2:value}> $0
endsnippet

snippet unique "std::unique_ptr"
std::unique_ptr<${1:int}> $0
endsnippet

snippet shared "std::shared_ptr"
std::shared_ptr<${1:int}> $0
endsnippet

snippet move "std::move"
std::move(${1}) $0
endsnippet

snippet s "std::"
std::$0
endsnippet

snippet cout
std::cout << ${1} << std::endl;
$0
endsnippet

snippet cin
std::cin >> $0
endsnippet

snippet printf
std::printf("${1}",${3:var})
endsnippet

snippet if "if statement"
if (${1:condition}){
    ${2}
}
$0
endsnippet

snippet ifel "if else statement"
if (${1:condition}){
    ${2}
}else{
    ${3}
}
$0
endsnippet

snippet ifefel "if ifelse else statement"
if (${1:condition}){
    ${2}
}else if${3:condition}){
    ${4}
}else{
    ${5}
}
$0
endsnippet

snippet temp "template"
template <typename T>
endsnippet
